param kernel_width: u16;
param num_elems: u16;

// Instantiate memcpy infrastructure
const memcpy = @import_module("<memcpy/get_params>", .{
  .width = kernel_width,
  .height = 1
  });

const color0 = @get_color(0);
const color1 = @get_color(1);
const color2 = @get_color(2);

layout {
  @assert(kernel_width % 2 == 0);

  // Use a single row of kernel_width PEs (columns=kernel_width, rows=1)
  @set_rectangle(kernel_width, 1);

  const common_params = .{
    .num_elems = num_elems,
    .kernel_width = kernel_width
  };

  const start_params = @concat_structs(common_params, .{
    .send_east_color = color0, .recv_west_color = color2
  });

  const even_params = @concat_structs(common_params, .{
    .send_east_color = color0, .recv_west_color = color1
  });

  const odd_params = @concat_structs(common_params, .{
    .send_east_color = color1, .recv_west_color = color0
  });

  const end_params = @concat_structs(common_params, .{
    .send_east_color = color2, .recv_west_color = color0
  });

  for (@range(u16, kernel_width)) |pe_x| {
    if (pe_x == 0) {
      @set_tile_code(pe_x, 0, "pe_program.csl", @concat_structs(
        .{ .memcpy_params = memcpy.get_params(pe_x) }, start_params));
    } else if (pe_x == kernel_width - 1) {
      @set_tile_code(pe_x, 0, "pe_program.csl", @concat_structs(
        .{ .memcpy_params = memcpy.get_params(pe_x) }, end_params));
    } else if (pe_x % 2 == 0) {
      @set_tile_code(pe_x, 0, "pe_program.csl", @concat_structs(
        .{ .memcpy_params = memcpy.get_params(pe_x) }, even_params));
    } else {
      @set_tile_code(pe_x, 0, "pe_program.csl", @concat_structs(
        .{ .memcpy_params = memcpy.get_params(pe_x) }, odd_params));
    }
  }

  // Create route values
  const RX_W_TX_R  = .{ .rx = .{WEST},  .tx = .{RAMP} };
  const RX_R_TX_E  = .{ .rx = .{RAMP},  .tx = .{EAST} };

  const RX_E_TX_R  = .{ .rx = .{EAST},  .tx = .{RAMP} };
  const RX_R_TX_W  = .{ .rx = .{RAMP},  .tx = .{WEST} };
  const RX_E_TX_W  = .{ .rx = .{EAST},  .tx = .{WEST} };

  for (@range(u16, kernel_width)) |pe_x| {
    if (pe_x == 0) {
      @set_color_config(pe_x, 0, color0, .{ .routes = RX_R_TX_E });
      @set_color_config(pe_x, 0, color2, .{ .routes = RX_E_TX_R });
    } else if (pe_x == kernel_width-1) {
      @set_color_config(pe_x, 0, color0, .{ .routes = RX_W_TX_R });
      @set_color_config(pe_x, 0, color2, .{ .routes = RX_R_TX_W });
    } else if (pe_x % 2 == 0) {
      @set_color_config(pe_x, 0, color0, .{ .routes = RX_R_TX_E });
      @set_color_config(pe_x, 0, color1, .{ .routes = RX_W_TX_R });
      @set_color_config(pe_x, 0, color2, .{ .routes = RX_E_TX_W });
    } else {
      @set_color_config(pe_x, 0, color0, .{ .routes = RX_W_TX_R });
      @set_color_config(pe_x, 0, color1, .{ .routes = RX_R_TX_E });
      @set_color_config(pe_x, 0, color2, .{ .routes = RX_E_TX_W });
    }
  }

  @export_name("arr0", [*]f32, true);
  @export_name("dot_products", [*]f32, true);
  @export_name("main_fn", fn()void);

    // PE: 0 --- 1 --- 2 --- 3

    // 0:  .>   >.     .>   >.
    //     ^     v     ^     v

    // 1:        .>   >.      
    //           ^     v      

    // 2:  .<   <.<   <.<   <.
    //     v                 ^
}
